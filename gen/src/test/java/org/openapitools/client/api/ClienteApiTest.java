/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Payment;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClienteApi
 */
@Ignore
public class ClienteApiTest {

    private final ClienteApi api = new ClienteApi();

    
    /**
     * Obtener informacion del cliente
     *
     * Actualiza la informacion del cliente 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientClientIdGetTest() throws ApiException {
        String clientId = null;
        Client response = api.clientClientIdGet(clientId);

        // TODO: test validations
    }
    
    /**
     * Obtener pedidos del cliente
     *
     * Obtener la lista de pedidos hechos por el cliente 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientClientIdOrdersGetTest() throws ApiException {
        String clientId = null;
        List<Object> response = api.clientClientIdOrdersGet(clientId);

        // TODO: test validations
    }
    
    /**
     * Obtiene datos de la ultima tarjeta usada por el cliente
     *
     * Obtiene datos de la ultima tarjeta usada por el cleiente 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientClientIdPaymentsGetTest() throws ApiException {
        Integer clientId = null;
        Payment response = api.clientClientIdPaymentsGet(clientId);

        // TODO: test validations
    }
    
    /**
     * Guardar la informacion de pago de un usuario
     *
     * Guarda informacion del pago  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientClientIdPaymentsPostTest() throws ApiException {
        Integer clientId = null;
        Payment body = null;
        api.clientClientIdPaymentsPost(clientId, body);

        // TODO: test validations
    }
    
    /**
     * Actualizar informacion del cliente
     *
     * Actualiza la informacion del cliente 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientClientIdPutTest() throws ApiException {
        String clientId = null;
        Client body = null;
        api.clientClientIdPut(clientId, body);

        // TODO: test validations
    }
    
}
