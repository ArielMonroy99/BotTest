/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Client;
import org.openapitools.client.model.Payment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClienteApi {
    private ApiClient localVarApiClient;

    public ClienteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClienteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientClientIdGet
     * @param clientId Referencia de usuario (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se Obtienen datos del cliente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener datos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cliente no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdGetCall(String clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdGetValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdGetCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * Obtener informacion del cliente
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se Obtienen datos del cliente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener datos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cliente no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public Client clientClientIdGet(String clientId) throws ApiException {
        ApiResponse<Client> localVarResp = clientClientIdGetWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * Obtener informacion del cliente
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se Obtienen datos del cliente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener datos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cliente no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Client> clientClientIdGetWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdGetValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener informacion del cliente (asynchronously)
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se Obtienen datos del cliente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener datos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cliente no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdGetAsync(String clientId, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdGetValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientIdOrdersGet
     * @param clientId Referencia de usuario (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de pedidos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> El usuario no tiene pedidos anteriores </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdOrdersGetCall(String clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{clientId}/orders"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdOrdersGetValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientIdOrdersGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdOrdersGetCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * Obtener pedidos del cliente
     * Obtener la lista de pedidos hechos por el cliente 
     * @param clientId Referencia de usuario (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de pedidos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> El usuario no tiene pedidos anteriores </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> clientClientIdOrdersGet(String clientId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = clientClientIdOrdersGetWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * Obtener pedidos del cliente
     * Obtener la lista de pedidos hechos por el cliente 
     * @param clientId Referencia de usuario (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de pedidos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> El usuario no tiene pedidos anteriores </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> clientClientIdOrdersGetWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdOrdersGetValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener pedidos del cliente (asynchronously)
     * Obtener la lista de pedidos hechos por el cliente 
     * @param clientId Referencia de usuario (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de pedidos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> El usuario no tiene pedidos anteriores </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdOrdersGetAsync(String clientId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdOrdersGetValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientIdPaymentsGet
     * @param clientId Referencia al usuario (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metodo de pago </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener metodo de pago </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron metodo de pago </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPaymentsGetCall(Integer clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{clientId}/payments"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdPaymentsGetValidateBeforeCall(Integer clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientIdPaymentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdPaymentsGetCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * Obtiene datos de la ultima tarjeta usada por el cliente
     * Obtiene datos de la ultima tarjeta usada por el cleiente 
     * @param clientId Referencia al usuario (required)
     * @return Payment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metodo de pago </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener metodo de pago </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron metodo de pago </td><td>  -  </td></tr>
     </table>
     */
    public Payment clientClientIdPaymentsGet(Integer clientId) throws ApiException {
        ApiResponse<Payment> localVarResp = clientClientIdPaymentsGetWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * Obtiene datos de la ultima tarjeta usada por el cliente
     * Obtiene datos de la ultima tarjeta usada por el cleiente 
     * @param clientId Referencia al usuario (required)
     * @return ApiResponse&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metodo de pago </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener metodo de pago </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron metodo de pago </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payment> clientClientIdPaymentsGetWithHttpInfo(Integer clientId) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdPaymentsGetValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtiene datos de la ultima tarjeta usada por el cliente (asynchronously)
     * Obtiene datos de la ultima tarjeta usada por el cleiente 
     * @param clientId Referencia al usuario (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metodo de pago </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener metodo de pago </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron metodo de pago </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPaymentsGetAsync(Integer clientId, final ApiCallback<Payment> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdPaymentsGetValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientIdPaymentsPost
     * @param clientId Referencia al usuario (required)
     * @param body Informacion del metodo de pago (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron los datos correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al guardar los datos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPaymentsPostCall(Integer clientId, Payment body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/client/{clientId}/payments"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdPaymentsPostValidateBeforeCall(Integer clientId, Payment body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientIdPaymentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling clientClientIdPaymentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdPaymentsPostCall(clientId, body, _callback);
        return localVarCall;

    }

    /**
     * Guardar la informacion de pago de un usuario
     * Guarda informacion del pago  
     * @param clientId Referencia al usuario (required)
     * @param body Informacion del metodo de pago (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron los datos correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al guardar los datos </td><td>  -  </td></tr>
     </table>
     */
    public void clientClientIdPaymentsPost(Integer clientId, Payment body) throws ApiException {
        clientClientIdPaymentsPostWithHttpInfo(clientId, body);
    }

    /**
     * Guardar la informacion de pago de un usuario
     * Guarda informacion del pago  
     * @param clientId Referencia al usuario (required)
     * @param body Informacion del metodo de pago (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron los datos correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al guardar los datos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientClientIdPaymentsPostWithHttpInfo(Integer clientId, Payment body) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdPaymentsPostValidateBeforeCall(clientId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Guardar la informacion de pago de un usuario (asynchronously)
     * Guarda informacion del pago  
     * @param clientId Referencia al usuario (required)
     * @param body Informacion del metodo de pago (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron los datos correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al guardar los datos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPaymentsPostAsync(Integer clientId, Payment body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdPaymentsPostValidateBeforeCall(clientId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientIdPut
     * @param clientId Referencia de usuario (required)
     * @param body En body se envia la informacion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro al usuario </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPutCall(String clientId, Client body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/client/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdPutValidateBeforeCall(String clientId, Client body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling clientClientIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = clientClientIdPutCall(clientId, body, _callback);
        return localVarCall;

    }

    /**
     * Actualizar informacion del cliente
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @param body En body se envia la informacion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro al usuario </td><td>  -  </td></tr>
     </table>
     */
    public void clientClientIdPut(String clientId, Client body) throws ApiException {
        clientClientIdPutWithHttpInfo(clientId, body);
    }

    /**
     * Actualizar informacion del cliente
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @param body En body se envia la informacion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro al usuario </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientClientIdPutWithHttpInfo(String clientId, Client body) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdPutValidateBeforeCall(clientId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Actualizar informacion del cliente (asynchronously)
     * Actualiza la informacion del cliente 
     * @param clientId Referencia de usuario (required)
     * @param body En body se envia la informacion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro al usuario </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientClientIdPutAsync(String clientId, Client body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdPutValidateBeforeCall(clientId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
