/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SucursalData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SucursalApi {
    private ApiClient localVarApiClient;

    public SucursalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SucursalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sucursalGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sucursales </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sucursales </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sucursal/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sucursalGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sucursalGetCall(_callback);
        return localVarCall;

    }

    /**
     * Todos los datos de las sucursales
     * Obtener datos sobre las sucursales
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sucursales </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sucursales </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> sucursalGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = sucursalGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Todos los datos de las sucursales
     * Obtener datos sobre las sucursales
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sucursales </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sucursales </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> sucursalGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sucursalGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Todos los datos de las sucursales (asynchronously)
     * Obtener datos sobre las sucursales
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sucursales </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sucursales </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sucursalGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sucursalPost
     * @param body Se añadira a las sucursales (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo una nueva sucursal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear una nueva sucursal </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalPostCall(SucursalData body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sucursal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sucursalPostValidateBeforeCall(SucursalData body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sucursalPost(Async)");
        }
        

        okhttp3.Call localVarCall = sucursalPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * Crea una nueva sucursal
     * Crea una nueva sucursal 
     * @param body Se añadira a las sucursales (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo una nueva sucursal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear una nueva sucursal </td><td>  -  </td></tr>
     </table>
     */
    public void sucursalPost(SucursalData body) throws ApiException {
        sucursalPostWithHttpInfo(body);
    }

    /**
     * Crea una nueva sucursal
     * Crea una nueva sucursal 
     * @param body Se añadira a las sucursales (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo una nueva sucursal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear una nueva sucursal </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sucursalPostWithHttpInfo(SucursalData body) throws ApiException {
        okhttp3.Call localVarCall = sucursalPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Crea una nueva sucursal (asynchronously)
     * Crea una nueva sucursal 
     * @param body Se añadira a las sucursales (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo una nueva sucursal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear una nueva sucursal </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalPostAsync(SucursalData body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sucursalPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sucursalSucursalIDGet
     * @param sucursalID Obtener datos de una sucursal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion de una sucursal </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalSucursalIDGetCall(String sucursalID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sucursal/{sucursalID}"
            .replaceAll("\\{" + "sucursalID" + "\\}", localVarApiClient.escapeString(sucursalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sucursalSucursalIDGetValidateBeforeCall(String sucursalID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sucursalID' is set
        if (sucursalID == null) {
            throw new ApiException("Missing the required parameter 'sucursalID' when calling sucursalSucursalIDGet(Async)");
        }
        

        okhttp3.Call localVarCall = sucursalSucursalIDGetCall(sucursalID, _callback);
        return localVarCall;

    }

    /**
     * Obtener la informacion de una sucursal
     * Obtener la informacion de una sucursal
     * @param sucursalID Obtener datos de una sucursal (required)
     * @return SucursalData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion de una sucursal </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public SucursalData sucursalSucursalIDGet(String sucursalID) throws ApiException {
        ApiResponse<SucursalData> localVarResp = sucursalSucursalIDGetWithHttpInfo(sucursalID);
        return localVarResp.getData();
    }

    /**
     * Obtener la informacion de una sucursal
     * Obtener la informacion de una sucursal
     * @param sucursalID Obtener datos de una sucursal (required)
     * @return ApiResponse&lt;SucursalData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion de una sucursal </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SucursalData> sucursalSucursalIDGetWithHttpInfo(String sucursalID) throws ApiException {
        okhttp3.Call localVarCall = sucursalSucursalIDGetValidateBeforeCall(sucursalID, null);
        Type localVarReturnType = new TypeToken<SucursalData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la informacion de una sucursal (asynchronously)
     * Obtener la informacion de una sucursal
     * @param sucursalID Obtener datos de una sucursal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion de una sucursal </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sucursalSucursalIDGetAsync(String sucursalID, final ApiCallback<SucursalData> _callback) throws ApiException {

        okhttp3.Call localVarCall = sucursalSucursalIDGetValidateBeforeCall(sucursalID, _callback);
        Type localVarReturnType = new TypeToken<SucursalData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
