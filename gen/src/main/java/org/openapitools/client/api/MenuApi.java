/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuApi {
    private ApiClient localVarApiClient;

    public MenuApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for menuCategoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorias del restaurante </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de categorias </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuCategoriesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuCategoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuCategoriesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Obtener las categorias del Menu
     * Obtener la lista de categorias que tiene el restaurante
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorias del restaurante </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de categorias </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuCategoriesGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuCategoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener las categorias del Menu
     * Obtener la lista de categorias que tiene el restaurante
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorias del restaurante </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de categorias </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuCategoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuCategoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener las categorias del Menu (asynchronously)
     * Obtener la lista de categorias que tiene el restaurante
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorias del restaurante </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de categorias </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuCategoriesGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuCategoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuDessertpopularGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de los postres mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de postres populares </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuDessertpopularGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/dessertpopular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuDessertpopularGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuDessertpopularGetCall(_callback);
        return localVarCall;

    }

    /**
     * Obtener los postrs mas populares
     * Obtener una lista de los postres populares del restaurante
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de los postres mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de postres populares </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuDessertpopularGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuDessertpopularGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener los postrs mas populares
     * Obtener una lista de los postres populares del restaurante
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de los postres mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de postres populares </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuDessertpopularGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuDessertpopularGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener los postrs mas populares (asynchronously)
     * Obtener una lista de los postres populares del restaurante
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de los postres mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de postres populares </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuDessertpopularGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuDessertpopularGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuDessertsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuDessertsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/desserts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuDessertsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuDessertsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Todos los postres que ofrece el restaurante
     * Obtener una lista de todos los postres que ofrece el restaurante
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuDessertsGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuDessertsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Todos los postres que ofrece el restaurante
     * Obtener una lista de todos los postres que ofrece el restaurante
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuDessertsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuDessertsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Todos los postres que ofrece el restaurante (asynchronously)
     * Obtener una lista de todos los postres que ofrece el restaurante
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuDessertsGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuDessertsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuMainPopularGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de platos principales mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de platos princiaples populares </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuMainPopularGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/mainPopular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuMainPopularGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuMainPopularGetCall(_callback);
        return localVarCall;

    }

    /**
     * Obtener los platos principales mas populares
     * Obtener una lista de los platos principales populares del restaurante
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de platos principales mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de platos princiaples populares </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuMainPopularGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuMainPopularGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener los platos principales mas populares
     * Obtener una lista de los platos principales populares del restaurante
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de platos principales mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de platos princiaples populares </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuMainPopularGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuMainPopularGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener los platos principales mas populares (asynchronously)
     * Obtener una lista de los platos principales populares del restaurante
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de platos principales mas populares </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encuentra la lista de platos princiaples populares </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuMainPopularGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuMainPopularGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuMaindishesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de platos principales </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuMaindishesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/maindishes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuMaindishesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuMaindishesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Todos los platos principales que ofrece el restaurante
     * Obtener una lista de todos los platos principales que ofrece el restaurante
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de platos principales </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuMaindishesGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuMaindishesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Todos los platos principales que ofrece el restaurante
     * Obtener una lista de todos los platos principales que ofrece el restaurante
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de platos principales </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuMaindishesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuMaindishesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Todos los platos principales que ofrece el restaurante (asynchronously)
     * Obtener una lista de todos los platos principales que ofrece el restaurante
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los platos </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de platos principales </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuMaindishesGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuMaindishesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuPlateIdGet
     * @param plateId Obtener datos de un plato (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuPlateIdGetCall(String plateId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/{plateId}"
            .replaceAll("\\{" + "plateId" + "\\}", localVarApiClient.escapeString(plateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuPlateIdGetValidateBeforeCall(String plateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'plateId' is set
        if (plateId == null) {
            throw new ApiException("Missing the required parameter 'plateId' when calling menuPlateIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = menuPlateIdGetCall(plateId, _callback);
        return localVarCall;

    }

    /**
     * Obtener la informacion de un plato
     * Obtener la informacion de un plato
     * @param plateId Obtener datos de un plato (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuPlateIdGet(String plateId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuPlateIdGetWithHttpInfo(plateId);
        return localVarResp.getData();
    }

    /**
     * Obtener la informacion de un plato
     * Obtener la informacion de un plato
     * @param plateId Obtener datos de un plato (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuPlateIdGetWithHttpInfo(String plateId) throws ApiException {
        okhttp3.Call localVarCall = menuPlateIdGetValidateBeforeCall(plateId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la informacion de un plato (asynchronously)
     * Obtener la informacion de un plato
     * @param plateId Obtener datos de un plato (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuPlateIdGetAsync(String plateId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuPlateIdGetValidateBeforeCall(plateId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for menuSoupsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sopa </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuSoupsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/soups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call menuSoupsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = menuSoupsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Todas las sopas que ofrece el restaurante
     * Obtener una lista de todas las sopas
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sopa </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> menuSoupsGet() throws ApiException {
        ApiResponse<List<Object>> localVarResp = menuSoupsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Todas las sopas que ofrece el restaurante
     * Obtener una lista de todas las sopas
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sopa </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> menuSoupsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = menuSoupsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Todas las sopas que ofrece el restaurante (asynchronously)
     * Obtener una lista de todas las sopas
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todas las sopa </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro la lista de sopas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call menuSoupsGetAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = menuSoupsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
