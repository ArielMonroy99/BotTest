/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Plate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlatoApi {
    private ApiClient localVarApiClient;

    public PlatoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlatoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for platePlateIdDelete
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se elimino con exito </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al eliminar el plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdDeleteCall(Integer plateId, Plate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/plate/{plateId}"
            .replaceAll("\\{" + "plateId" + "\\}", localVarApiClient.escapeString(plateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platePlateIdDeleteValidateBeforeCall(Integer plateId, Plate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'plateId' is set
        if (plateId == null) {
            throw new ApiException("Missing the required parameter 'plateId' when calling platePlateIdDelete(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling platePlateIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = platePlateIdDeleteCall(plateId, body, _callback);
        return localVarCall;

    }

    /**
     * Eliminar plato
     * Elimina el plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se elimino con exito </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al eliminar el plato </td><td>  -  </td></tr>
     </table>
     */
    public void platePlateIdDelete(Integer plateId, Plate body) throws ApiException {
        platePlateIdDeleteWithHttpInfo(plateId, body);
    }

    /**
     * Eliminar plato
     * Elimina el plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se elimino con exito </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al eliminar el plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> platePlateIdDeleteWithHttpInfo(Integer plateId, Plate body) throws ApiException {
        okhttp3.Call localVarCall = platePlateIdDeleteValidateBeforeCall(plateId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Eliminar plato (asynchronously)
     * Elimina el plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se elimino con exito </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al eliminar el plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdDeleteAsync(Integer plateId, Plate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = platePlateIdDeleteValidateBeforeCall(plateId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for platePlateIdGet
     * @param plateId Referencia al plato (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener la informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron datos del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdGetCall(Integer plateId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plate/{plateId}"
            .replaceAll("\\{" + "plateId" + "\\}", localVarApiClient.escapeString(plateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platePlateIdGetValidateBeforeCall(Integer plateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'plateId' is set
        if (plateId == null) {
            throw new ApiException("Missing the required parameter 'plateId' when calling platePlateIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = platePlateIdGetCall(plateId, _callback);
        return localVarCall;

    }

    /**
     * Obtener la informacion del plato
     * Obtiene todos los datos registrados del plato 
     * @param plateId Referencia al plato (required)
     * @return Plate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener la informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron datos del plato </td><td>  -  </td></tr>
     </table>
     */
    public Plate platePlateIdGet(Integer plateId) throws ApiException {
        ApiResponse<Plate> localVarResp = platePlateIdGetWithHttpInfo(plateId);
        return localVarResp.getData();
    }

    /**
     * Obtener la informacion del plato
     * Obtiene todos los datos registrados del plato 
     * @param plateId Referencia al plato (required)
     * @return ApiResponse&lt;Plate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener la informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron datos del plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plate> platePlateIdGetWithHttpInfo(Integer plateId) throws ApiException {
        okhttp3.Call localVarCall = platePlateIdGetValidateBeforeCall(plateId, null);
        Type localVarReturnType = new TypeToken<Plate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la informacion del plato (asynchronously)
     * Obtiene todos los datos registrados del plato 
     * @param plateId Referencia al plato (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del plato </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al obtener la informacion del plato </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontraron datos del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdGetAsync(Integer plateId, final ApiCallback<Plate> _callback) throws ApiException {

        okhttp3.Call localVarCall = platePlateIdGetValidateBeforeCall(plateId, _callback);
        Type localVarReturnType = new TypeToken<Plate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for platePlateIdPut
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdPutCall(Integer plateId, Plate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/plate/{plateId}"
            .replaceAll("\\{" + "plateId" + "\\}", localVarApiClient.escapeString(plateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platePlateIdPutValidateBeforeCall(Integer plateId, Plate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'plateId' is set
        if (plateId == null) {
            throw new ApiException("Missing the required parameter 'plateId' when calling platePlateIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling platePlateIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = platePlateIdPutCall(plateId, body, _callback);
        return localVarCall;

    }

    /**
     * Actualizar informacion del plato
     * Actualiza los datos del plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public void platePlateIdPut(Integer plateId, Plate body) throws ApiException {
        platePlateIdPutWithHttpInfo(plateId, body);
    }

    /**
     * Actualizar informacion del plato
     * Actualiza los datos del plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> platePlateIdPutWithHttpInfo(Integer plateId, Plate body) throws ApiException {
        okhttp3.Call localVarCall = platePlateIdPutValidateBeforeCall(plateId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Actualizar informacion del plato (asynchronously)
     * Actualiza los datos del plato 
     * @param plateId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se guardaron satisfactoriamente los cambios </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al actualizar la informacion del plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePlateIdPutAsync(Integer plateId, Plate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = platePlateIdPutValidateBeforeCall(plateId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for platePost
     * @param body Plato que se añadira al manu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo el nuevo plato satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePostCall(Plate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/plate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platePostValidateBeforeCall(Plate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling platePost(Async)");
        }
        

        okhttp3.Call localVarCall = platePostCall(body, _callback);
        return localVarCall;

    }

    /**
     * Crea un nuevo plato
     * Crea en nuevo pedido 
     * @param body Plato que se añadira al manu (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo el nuevo plato satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo plato </td><td>  -  </td></tr>
     </table>
     */
    public void platePost(Plate body) throws ApiException {
        platePostWithHttpInfo(body);
    }

    /**
     * Crea un nuevo plato
     * Crea en nuevo pedido 
     * @param body Plato que se añadira al manu (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo el nuevo plato satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo plato </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> platePostWithHttpInfo(Plate body) throws ApiException {
        okhttp3.Call localVarCall = platePostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Crea un nuevo plato (asynchronously)
     * Crea en nuevo pedido 
     * @param body Plato que se añadira al manu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Se creo el nuevo plato satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo plato </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platePostAsync(Plate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = platePostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
