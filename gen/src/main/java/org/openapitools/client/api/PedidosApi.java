/*
 * Delivery API
 * API para manejar pedidos y entrega de platos de un restaurant
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PedidosApi {
    private ApiClient localVarApiClient;

    public PedidosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PedidosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for ordersOrderIdGet
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del pedido </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro el pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdGetCall(String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdGetValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdGetCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Obtener pedido por id
     * Obtener la informacion de un pedido por el id 
     * @param orderId  (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del pedido </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro el pedido </td><td>  -  </td></tr>
     </table>
     */
    public Order ordersOrderIdGet(String orderId) throws ApiException {
        ApiResponse<Order> localVarResp = ordersOrderIdGetWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Obtener pedido por id
     * Obtener la informacion de un pedido por el id 
     * @param orderId  (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del pedido </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro el pedido </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> ordersOrderIdGetWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdGetValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener pedido por id (asynchronously)
     * Obtener la informacion de un pedido por el id 
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Informacion del pedido </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No se encontro el pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdGetAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdGetValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdPut
     * @param orderId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> El pedido fue enviado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error al actualizar el estado del pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdPutCall(String orderId, Order body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdPutValidateBeforeCall(String orderId, Order body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ordersOrderIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdPutCall(orderId, body, _callback);
        return localVarCall;

    }

    /**
     * actualizar el estado por Id
     * Actualizar el estado de un pedido por el id 
     * @param orderId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> El pedido fue enviado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error al actualizar el estado del pedido </td><td>  -  </td></tr>
     </table>
     */
    public void ordersOrderIdPut(String orderId, Order body) throws ApiException {
        ordersOrderIdPutWithHttpInfo(orderId, body);
    }

    /**
     * actualizar el estado por Id
     * Actualizar el estado de un pedido por el id 
     * @param orderId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> El pedido fue enviado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error al actualizar el estado del pedido </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ordersOrderIdPutWithHttpInfo(String orderId, Order body) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdPutValidateBeforeCall(orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * actualizar el estado por Id (asynchronously)
     * Actualizar el estado de un pedido por el id 
     * @param orderId Referencia al plato (required)
     * @param body En body se envia la informacion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> El pedido fue enviado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error al actualizar el estado del pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdPutAsync(String orderId, Order body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdPutValidateBeforeCall(orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersPost
     * @param body Pedido que se añadira al servicio (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Se creo el nuevo pedido satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersPostCall(Order body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersPostValidateBeforeCall(Order body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ordersPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * Crea un nuevo pedido
     * Crea en nuevo pedido 
     * @param body Pedido que se añadira al servicio (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Se creo el nuevo pedido satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo pedido </td><td>  -  </td></tr>
     </table>
     */
    public void ordersPost(Order body) throws ApiException {
        ordersPostWithHttpInfo(body);
    }

    /**
     * Crea un nuevo pedido
     * Crea en nuevo pedido 
     * @param body Pedido que se añadira al servicio (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Se creo el nuevo pedido satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo pedido </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ordersPostWithHttpInfo(Order body) throws ApiException {
        okhttp3.Call localVarCall = ordersPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Crea un nuevo pedido (asynchronously)
     * Crea en nuevo pedido 
     * @param body Pedido que se añadira al servicio (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Se creo el nuevo pedido satisfactoriamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error al crear el nuevo pedido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersPostAsync(Order body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
